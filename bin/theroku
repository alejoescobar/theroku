require 'commander/import'
require 'theroku'

# :name is optional, otherwise uses the basename of this executable
program :name, 'Theroku'
program :version, '0.0.2'
program :description, "Awesome gem that'll bring you to balance."

command :login do |c|
  c.syntax = 'theroku login'
  c.description = 'Login into theroku awesome app.'
  c.action do |args, options|
    name = ask("Email: ")
    password = ask("Password:  ") { |q| q.echo = "*" }
    LoginCommand.new.execute(name, password, "This is a temporal token")
  end
end

command :create do |c|
  c.syntax = 'theroku create [args]'
  c.description = 'theroku create <url_1> <url_2> <app_name>'
  c.action do |args, options|
    CreateCommand.new.execute(*args)
  end
end

command :update do |c|
  c.syntax = 'theroku update [options]'
  c.description = 'theroku update <old_app_name> --app_name <new_app_name> --url1 <new_url1> --url2 <new_url2>'
  c.option '--app_name STRING', String, 'Changes the app_name'
  c.option '--url1 STRING', String, 'Changes the url1'
  c.option '--url2 STRING', String, 'Changes the url2'
  c.action do |args, options|
    p args
    UpdateCommand.new.execute(options.app_name, options.url1, options.url2, args[0])
  end
end

command :destroy do |c|
  c.syntax = 'theroku create [args]'
  c.description = 'theroku destroy <app_name>'
  c.action do |args, options|
    DestroyCommand.new.execute(*args)
end

command :open do |c|
  c.syntax = 'theroku open'
  c.description = 'theroku open'
  c.action do |args, options|
    CreateCommand.new.execute(*args)
  end
end


end
